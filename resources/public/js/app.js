// Generated by CoffeeScript 1.4.0
(function() {
  var defaultQueries, sessionQueries;

  window.app = angular.module('app', []);

  app.config([
    '$routeProvider', function($routeProvider) {
      return $routeProvider.when('/', {
        templateUrl: '/templates/index.html',
        controller: app.IndexCtrl
      }).when('/port/:port', {
        templateUrl: '/templates/store.html',
        controller: app.StoreCtrl
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

  /* --------------------------------------------
       Begin directives.coffee
  --------------------------------------------
  */


  app.directive('sparqlValue', function($rootScope) {
    return {
      template: "<span ng-show=\"literal\">{{v}}</span>\n<a href=\"#\" ng-click=\"explore(v)\" ng-hide=\"literal\">{{prefixed}}</a>",
      link: function(scope, element, attrs) {
        return scope.$watch(attrs.sparqlValue, function(value) {
          var prefix, uri, _ref;
          if (value) {
            if (value.type === "uri") {
              scope.literal = false;
              scope.v = value.value;
              _ref = $rootScope.prefixes;
              for (prefix in _ref) {
                uri = _ref[prefix];
                if (value.value.indexOf(uri) === -1) {
                  scope.prefixed = value.value;
                } else {
                  return scope.prefixed = value.value.replace(uri, prefix + ":");
                }
              }
            } else {
              scope.v = value.value;
              return scope.literal = true;
            }
          }
        });
      }
    };
  });

  app.directive('prefixesArea', function($rootScope) {
    return {
      template: "<div ng-repeat=\"(prefix, uri) in prefixes\">test {}</div>",
      link: function(scope, element, attrs) {}
    };
  });

  /* --------------------------------------------
       Begin services.coffee
  --------------------------------------------
  */


  app.factory('FourstoreService', function($http) {
    var FourstoreService;
    return new (FourstoreService = (function() {

      function FourstoreService() {}

      FourstoreService.prototype.get = function(port, query, callback) {
        return $http({
          method: "GET",
          url: "/api/get",
          params: {
            query: query,
            endpoint: "http://localhost:" + port
          }
        }).success(callback);
      };

      FourstoreService.prototype.post = function(port, query, callback) {
        return $http({
          method: "POST",
          url: "/api/post",
          data: {
            query: query,
            endpoint: "http://localhost:" + port
          }
        }).success(callback);
      };

      FourstoreService.prototype.construct = function(port, query, callback) {
        console.log(query);
        return $http({
          method: "GET",
          url: "/api/construct",
          params: {
            query: query,
            endpoint: "http://localhost:" + port
          }
        }).success(callback);
      };

      return FourstoreService;

    })());
  });

  /* --------------------------------------------
       Begin controllers.coffee
  --------------------------------------------
  */


  app.IndexCtrl = function($scope, FourstoreService, $location) {
    $scope.port = 8010;
    return $scope.open4store = function(port) {
      return $location.path("/port/" + port);
    };
  };

  defaultQueries = {
    get: "SELECT *\nWHERE {\n  ?s ?p ?o\n}\nLIMIT 10",
    post: " \nINSERT {\n  GRAPH <> {\n    <> <> <> .\n  }\n}",
    construct: "CONSTRUCT {\n  ?s ?p ?o .\n}\nWHERE {\n  ?s ?p ?o .\n}"
  };

  sessionQueries = _.clone(defaultQueries);

  app.StoreCtrl = function($scope, $routeParams, $rootScope, $timeout, FourstoreService) {
    var sparqlEditor, turtleEditor,
      _this = this;
    sparqlEditor = null;
    turtleEditor = null;
    $scope.port = $routeParams.port;
    $scope.method = "get";
    $timeout(function() {
      sparqlEditor = CodeMirror.fromTextArea(angular.element('.sparql-query')[0], {
        theme: "elegant"
      });
      turtleEditor = CodeMirror.fromTextArea(angular.element('#turtle-result')[0], {
        theme: "elegant"
      });
      return sparqlEditor.setValue(sessionQueries.get);
    }, 0);
    $scope.changeQuery = function(method) {
      event.preventDefault();
      sessionQueries[$scope.method] = sparqlEditor.getValue();
      $scope.method = method;
      sparqlEditor.setValue(sessionQueries[method]);
      return $(event.target).tab('show');
    };
    $scope.run = function() {
      sessionQueries[$scope.method] = sparqlEditor.getValue();
      return $scope[$scope.method]($('.prefixes-area').text() + "\n" + sessionQueries[$scope.method]);
    };
    $scope.get = function(query) {
      return FourstoreService.get($scope.port, query, function(response) {
        if (response.status === 200) {
          $scope.results = JSON.parse(response.body);
          $scope.turtle = false;
          angular.element("#tabs-results li:eq(0) a").tab('show');
          return Alertify.log.success("showing results");
        } else {
          return Alertify.log.error('unable to run this query');
        }
      });
    };
    $scope.post = function(query) {
      return FourstoreService.post($scope.port, query, function(response) {
        if (response.status === 200) {
          $scope.changeQuery('get');
          run();
          return Alertify.log.success("update successed");
        } else {
          return Alertify.log.error('unable to run this update query');
        }
      });
    };
    $scope.construct = function(query) {
      return FourstoreService.construct($scope.port, query, function(response) {
        console.log(response);
        $scope.turtle = response.body;
        $scope.results = false;
        turtleEditor.setValue(response.body);
        $timeout(function() {
          return turtleEditor.scrollTo(0, 0);
        }, 0);
        if (response.status === 200) {
          return Alertify.log.success("construct successed");
        } else {
          return Alertify.log.error('unable to run this query');
        }
      });
    };
    return $scope.explore = function(v) {
      event.preventDefault();
      angular.element("#tabs-results li:eq(1) a").tab('show');
      FourstoreService.get($scope.port, "SELECT ?predicate ?object ?graph\nWHERE {\n  GRAPH ?graph {\n    <" + v + "> ?predicate ?object .\n  }\n}", function(res) {
        if (res.status === 200) {
          return $scope.po = JSON.parse(res.body);
        }
      });
      FourstoreService.get($scope.port, "SELECT ?subject ?object ?graph\nWHERE {\n  GRAPH ?graph {\n    ?subject <" + v + "> ?object .\n  }\n}", function(res) {
        if (res.status === 200) {
          return $scope.so = JSON.parse(res.body);
        }
      });
      return FourstoreService.get($scope.port, "SELECT ?subject ?predicate ?graph\nWHERE {\n  GRAPH ?graph {\n    ?subject ?predicate <" + v + "> .\n  }\n}", function(res) {
        if (res.status === 200) {
          return $scope.sp = JSON.parse(res.body);
        }
      });
    };
  };

  app.PrefixesCtrl = function($scope, $rootScope) {
    var prefixes, savePrefixes, sparqlPrefixes;
    if (!localStorage.getItem("prefixes")) {
      localStorage.setItem("prefixes", JSON.stringify({
        'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
        'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
        'dc11': 'http://purl.org/dc/elements/1.1/',
        'skos': 'http://www.w3.org/2004/02/skos/core#',
        'foaf': 'http://xmlns.com/foaf/0.1/',
        'schema': 'http://schema.org/'
      }));
    }
    prefixes = JSON.parse(localStorage.getItem("prefixes"));
    $rootScope.prefixes = prefixes;
    $rootScope.$watch("prefixes", function(value) {
      return $scope.prefixesStr = sparqlPrefixes(value);
    });
    $scope.addPrefix = function(prefix, uri) {
      if (prefix && uri) {
        $rootScope.prefixes[prefix] = uri;
        if (!$rootScope.$$phase) {
          $rootScope.$apply();
        }
        return savePrefixes();
      }
    };
    $scope.modifyPrefix = function(prefix, idx) {
      $rootScope.prefixes[prefix] = $("#uri-" + idx).val();
      if (!$rootScope.$$phase) {
        $rootScope.$apply();
      }
      return savePrefixes();
    };
    $scope.deletePrefix = function(prefix) {
      delete $rootScope.prefixes[prefix];
      return savePrefixes();
    };
    sparqlPrefixes = function(prefixes) {
      return _.map(prefixes, function(prefix, uri) {
        return "PREFIX " + prefix + ": <" + uri + "> ";
      }).join("\n");
    };
    return savePrefixes = function() {
      return localStorage.setItem("prefixes", JSON.stringify($rootScope.prefixes));
    };
  };

}).call(this);
